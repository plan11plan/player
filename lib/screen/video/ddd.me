1. 로컬에 저장된 파일 관리
파일 저장 위치 선정: 다운로드된 파일을 저장할 디렉토리를 정해야 하며, 이 디렉토리는 사용자의 개인 정보와 충돌하지 않아야 합니다.
파일 목록 가져오기: 지정된 디렉토리에서 비디오와 오디오 파일 목록을 가져오는 기능을 구현해야 합니다.
메타데이터 관리: 다운로드한 파일의 제목, 이미지, 경로 등의 메타데이터를 저장하고 관리할 수 있는 방법을 찾아야 합니다. SQLite나 Hive와 같은 로컬 데이터베이스를 사용할 수 있습니다.
2. 파일 삭제와 추가에 대한 상태 유지
파일 삭제: 사용자가 파일을 삭제하면, 해당 파일과 연관된 메타데이터도 함께 삭제되어야 합니다.
파일 추가: 새로운 파일이 다운로드되면, 해당 파일과 관련된 메타데이터를 데이터베이스에 추가해야 합니다.
상태 유지: 앱을 종료하고 다시 시작해도 이전 상태가 유지되어야 하므로, 모든 정보를 안전하게 저장해야 합니다.
3. 플레이리스트 관리
플레이리스트 생성: 사용자가 플레이리스트를 생성하고 관리할 수 있게 해야 합니다.
플레이리스트에 파일 추가/삭제: 특정 파일을 플레이리스트에 추가하거나 삭제하는 기능을 구현해야 합니다.
플레이리스트 재생: 플레이리스트에 속한 음악만 재생하는 기능을 구현해야 합니다.
가이드라인
파일 저장 위치 선정: getApplicationDocumentsDirectory() 등을 사용하여 앱 전용 디렉토리를 활용하면 좋습니다.
로컬 데이터베이스 사용: 파일의 메타데이터를 저장하기 위해 SQLite나 Hive 같은 로컬 데이터베이스를 사용합니다. 파일의 제목, 경로, 이미지 등의 정보를 저장합니다.
파일 목록 업데이트: 앱이 시작할 때 또는 파일이 추가/삭제될 때 파일 목록을 업데이트합니다.
파일 삭제 구현: 사용자가 파일을 삭제할 수 있게 하며, 삭제된 파일의 메타데이터도 데이터베이스에서 삭제합니다.
플레이리스트 관리: 플레이리스트를 생성하고, 특정 파일을 플레이리스트에 추가/삭제할 수 있는 UI를 제공합니다.
플레이리스트 재생: 선택된 플레이리스트에 있는 파일만 재생하게 합니다.
상상속 테스트
다운로드 후 목록에 추가: 파일을 다운로드하면 해당 파일이 목록에 추가되어야 하며, 앱을 재시작해도 목록이 유지되어야 합니다.
파일 삭제 테스트: 파일을 삭제하면 목록에서도 삭제되어야 하며, 앱을 재시작해도 삭제 상태가 유지되어야 합니다.
플레이리스트 작동 테스트: 플레이리스트를 생성하고, 파일을 추가/삭제한 후, 플레이리스트만 재생되는지 확인합니다.
이러한 가이드라인과 테스트 과정을 따라 개발을 진행하면, 요구사항을 만족하는 앱을 만들 수 있을 것입니다.